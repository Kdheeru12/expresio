{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-django-webrtc-group-video-app\\\\frontend\\\\src\\\\components\\\\video_room\\\\VideoRoom.jsx\";\nimport React, { Component } from \"react\";\nimport Peer from \"simple-peer\"; // Material UI components\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Fab from \"@material-ui/core/Fab\";\nimport VolumeUpRoundedIcon from \"@material-ui/icons/VolumeUpRounded\";\nimport VolumeOffRoundedIcon from \"@material-ui/icons/VolumeOffRounded\";\nimport VideocamRoundedIcon from \"@material-ui/icons/VideocamRounded\";\nimport VideocamOffRoundedIcon from \"@material-ui/icons/VideocamOffRounded\";\nimport ExitToAppRoundedIcon from \"@material-ui/icons/ExitToAppRounded\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Alert from \"@material-ui/lab/Alert\"; // Components\n\nimport Video from \"./Video\"; // Utility components, functions, constants, objects...\n\nimport { UserInfoContext, webSocketUrl, AVAILABLE_PATHS } from \"../utilities\";\nimport videoRoomStyles from \"./video_room_styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class VideoRoom extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.muteVideo = () => {\n      const stream = document.getElementById(\"localVideo\").srcObject;\n      if (!stream.getVideoTracks()[0]) return;\n      stream.getVideoTracks()[0].enabled = !stream.getVideoTracks()[0].enabled;\n      this.setState({\n        isVideoMuted: !stream.getVideoTracks()[0].enabled\n      });\n    };\n\n    this.muteAudio = () => {\n      const stream = document.getElementById(\"localVideo\").srcObject;\n      if (!stream.getAudioTracks()[0]) return;\n      stream.getAudioTracks()[0].enabled = !stream.getAudioTracks()[0].enabled;\n      this.setState({\n        isAudioMuted: !stream.getAudioTracks()[0].enabled\n      });\n    };\n\n    this.leaveRoom = () => {\n      const {\n        history\n      } = this.props;\n      history.push(AVAILABLE_PATHS.LOBBY_PATH);\n    };\n\n    this.CreatePeer = function (currentUserId, otherUserId) {\n      let currentUserStream = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      // User creates peer as initiator\n      const peer = new Peer({\n        initiator: true,\n        trickle: false,\n        stream: currentUserStream\n      }); // Offer is sent\n\n      peer.on(\"signal\", signal => {\n        _this.state.websocket.send(JSON.stringify({\n          type: \"sending_offer\",\n          from: currentUserId,\n          to: otherUserId,\n          offer: signal\n        }));\n      }); // Peer is then returned\n\n      return peer;\n    };\n\n    this.addPeer = function (currentUserId, otherUserId, receivedOffer) {\n      let currentUserStream = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      // User creates peer but not as an initiator \n      const peer = new Peer({\n        initiator: false,\n        trickle: false,\n        stream: currentUserStream\n      }); // The offer that was sent is set as remote description\n\n      peer.signal(receivedOffer); // Answer is sent back to the user who sent the offer\n\n      peer.on(\"signal\", signal => {\n        _this.state.websocket.send(JSON.stringify({\n          type: \"sending_answer\",\n          from: currentUserId,\n          to: otherUserId,\n          answer: signal\n        }));\n      }); // Peer is then returned\n\n      return peer;\n    };\n\n    this.sendSignalsToAll = function (currentUserId) {\n      let stream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      const peers = [];\n\n      _this.state.usersConnected.forEach(otherUser => {\n        if (otherUser.user_id !== currentUserId) {\n          const peer = _this.CreatePeer(currentUserId, otherUser.user_id, stream);\n\n          peers.push({\n            user_id: otherUser.user_id,\n            user_full_name: otherUser.user_full_name,\n            peer: peer\n          });\n        }\n      });\n\n      _this.setState({\n        peersEstablished: peers\n      });\n    };\n\n    this.componentDidMount = () => {\n      const {\n        printFeedback,\n        match: {\n          params\n        }\n      } = this.props; // Checks whether 'navigator.mediaDevices' is available for this browser or not\n\n      if (!navigator.mediaDevices) {\n        this.setState({\n          isVideoRoomAccessible: false\n        });\n        printFeedback({\n          type: \"error\",\n          feedbackMsg: \"this video room is not accessible because the site is not running on secure protocol, i.e. 'HTTPS'\"\n        });\n        return;\n      } // Extracting current user info\n\n\n      const {\n        userId,\n        userFullName\n      } = this.context; // Websocket connection is made\n\n      const websocket = new WebSocket(webSocketUrl() + `${params.roomId}/`);\n      this.setState({\n        websocket: websocket\n      });\n\n      websocket.onopen = () => {\n        this.setState({\n          contentLoading: true\n        }); // Send all users in the room new user joined\n\n        websocket.send(JSON.stringify({\n          type: \"new_user_joined\",\n          from: userId,\n          user_full_name: userFullName,\n          token: localStorage.getItem(\"access_token\")\n        }));\n      };\n\n      websocket.onmessage = payload => {\n        // Message from backend\n        const data = JSON.parse(payload.data);\n\n        switch (data.type) {\n          case \"new_user_joined\":\n            this.setState({\n              usersConnected: data.users_connected\n            }); // If user joined is current user, the user is requested to enable the media devices and offer is created and sent to other user\n\n            if (userId === data.from) {\n              navigator.mediaDevices.getUserMedia({\n                video: true,\n                audio: true\n              }).then(stream => {\n                this.setState({\n                  stream: stream\n                });\n                document.getElementById(\"localVideo\").srcObject = stream;\n                this.sendSignalsToAll(userId, stream);\n              }).catch(error => {\n                this.setState({\n                  isVideoRoomAccessible: false\n                });\n                printFeedback({\n                  type: \"error\",\n                  feedbackMsg: \"you need to enable media devices inorder to use access this room\"\n                });\n                console.log(error.message);\n                return;\n              });\n            } // Message is send to other user that new user joined\n\n\n            if (userId !== data.from) {\n              const user = this.state.usersConnected.find(eachUser => eachUser.user_id === data.from);\n              printFeedback({\n                type: \"success\",\n                feedbackMsg: `${user.user_full_name} joined this room`\n              });\n              console.log(`User No. ${data.from} joined this room`);\n            }\n\n            break;\n          // Offer is received here by others who then store it in there state and sends the answer\n\n          case \"sending_offer\":\n            if (data.to === userId) {\n              console.log(\"offer_received\");\n              const peer = this.addPeer(userId, data.from, data.offer, this.state.stream);\n              this.setState(_ref => {\n                let {\n                  peersEstablished\n                } = _ref;\n                const user = this.state.usersConnected.find(eachUser => eachUser.user_id === data.from);\n                let newPeersList = [...peersEstablished, {\n                  user_id: data.from,\n                  user_full_name: user.user_full_name,\n                  peer: peer\n                }]; // Checks whether the peer with same user id exists in the 'peersEstablished' state, that peer is then removed\n\n                const userPeer = this.state.peersEstablished.find(eachUser => eachUser.user_id === data.from);\n\n                if (userPeer) {\n                  const newList = this.state.peersEstablished.filter(peer => userPeer.user_id !== peer.user_id);\n                  newPeersList = [...newList, {\n                    user_id: data.from,\n                    user_full_name: user.user_full_name,\n                    peer: peer\n                  }];\n                }\n\n                return {\n                  peersEstablished: newPeersList\n                };\n              });\n            }\n\n            break;\n          // Answer is received here by the user who just joined\n\n          case \"sending_answer\":\n            if (data.to === userId) {\n              console.log(\"answer_received\");\n              const userPeer = this.state.peersEstablished.find(eachUser => eachUser.user_id === data.from); // Answer is set as remote description\n\n              userPeer.peer.signal(data.answer);\n            }\n\n            break;\n\n          case \"disconnected\":\n            if (data.from !== userId) {\n              const user = this.state.usersConnected.find(eachUser => eachUser.user_id === data.from); // Feedback is sent to users about who just disconnected\n\n              if (user) {\n                console.log(`User No. ${data.from} disconnected`);\n                printFeedback({\n                  type: \"error\",\n                  feedbackMsg: `${user.user_full_name} left`\n                }); // Peer associated with the user that just disconnected is destroyed\n\n                const userPeer = this.state.peersEstablished.find(eachUser => eachUser.user_id === data.from);\n\n                if (userPeer) {\n                  userPeer.peer.destroy();\n                  const newPeersList = this.state.peersEstablished.filter(peer => userPeer.user_id !== peer.user_id);\n                  this.setState({\n                    peersEstablished: newPeersList\n                  });\n                }\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      };\n    };\n\n    this.componentWillUnmount = () => {\n      // Websocket is closed\n      const {\n        websocket,\n        peersEstablished,\n        stream\n      } = this.state;\n\n      if (websocket) {\n        this.state.websocket.close();\n      } // All peers is destroyed\n\n\n      peersEstablished.forEach(_ref2 => {\n        let {\n          peer\n        } = _ref2;\n        peer.destroy();\n      }); // Streams are stopped\n\n      if (stream) {\n        stream.getTracks().forEach(track => {\n          track.stop();\n        });\n      } // All state is cleared\n\n\n      this.setState({\n        websocket: null,\n        stream: null,\n        usersConnected: [],\n        peersEstablished: [],\n        isVideoMuted: true,\n        isAudioMuted: true\n      });\n    };\n\n    this.state = {\n      websocket: null,\n      stream: null,\n      usersConnected: [],\n      peersEstablished: [],\n      isVideoMuted: false,\n      isAudioMuted: false,\n      contentLoading: true,\n      isVideoRoomAccessible: true\n    };\n  }\n\n  render() {\n    const {\n      isVideoRoomAccessible,\n      isVideoMuted,\n      isAudioMuted,\n      peersEstablished\n    } = this.state;\n    const {\n      userFullName\n    } = this.context;\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isVideoRoomAccessible ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.floatingButtons,\n          children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Video ON/OFF\",\n            children: /*#__PURE__*/_jsxDEV(Fab, {\n              className: classes.floatingButton,\n              onClick: this.muteVideo,\n              color: \"inherit\",\n              children: isVideoMuted ? /*#__PURE__*/_jsxDEV(VideocamOffRoundedIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(VideocamRoundedIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Audio ON/OFF\",\n            children: /*#__PURE__*/_jsxDEV(Fab, {\n              className: classes.floatingButton,\n              onClick: this.muteAudio,\n              color: \"inherit\",\n              children: isAudioMuted ? /*#__PURE__*/_jsxDEV(VolumeOffRoundedIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(VolumeUpRoundedIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Leave Room\",\n            children: /*#__PURE__*/_jsxDEV(Fab, {\n              onClick: this.leaveRoom,\n              className: classes.floatingButton,\n              color: \"secondary\",\n              children: /*#__PURE__*/_jsxDEV(ExitToAppRoundedIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Video, {\n          isLocalUser: true,\n          id: \"localVideo\",\n          user_full_name: userFullName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.videoGrid,\n          children: peersEstablished.length > 0 ? peersEstablished.map((userPeer, index) => /*#__PURE__*/_jsxDEV(Video, {\n            id: `remote-${userPeer.user_id}`,\n            user_id: userPeer.user_id,\n            user_full_name: userPeer.user_full_name,\n            peer: userPeer.peer\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"info\",\n            children: \"No one joined yet!!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // Error displayed if something goes wrong\n      _jsxDEV(Alert, {\n        className: classes.alert,\n        severity: \"error\",\n        children: \"This room is not accessible. Please make sure you enabled your media devices\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nVideoRoom.contextType = UserInfoContext;\nexport default withStyles(videoRoomStyles)(VideoRoom);","map":{"version":3,"sources":["D:/react-django-webrtc-group-video-app/frontend/src/components/video_room/VideoRoom.jsx"],"names":["React","Component","Peer","withStyles","Fab","VolumeUpRoundedIcon","VolumeOffRoundedIcon","VideocamRoundedIcon","VideocamOffRoundedIcon","ExitToAppRoundedIcon","Tooltip","Alert","Video","UserInfoContext","webSocketUrl","AVAILABLE_PATHS","videoRoomStyles","VideoRoom","constructor","props","muteVideo","stream","document","getElementById","srcObject","getVideoTracks","enabled","setState","isVideoMuted","muteAudio","getAudioTracks","isAudioMuted","leaveRoom","history","push","LOBBY_PATH","CreatePeer","currentUserId","otherUserId","currentUserStream","peer","initiator","trickle","on","signal","state","websocket","send","JSON","stringify","type","from","to","offer","addPeer","receivedOffer","answer","sendSignalsToAll","peers","usersConnected","forEach","otherUser","user_id","user_full_name","peersEstablished","componentDidMount","printFeedback","match","params","navigator","mediaDevices","isVideoRoomAccessible","feedbackMsg","userId","userFullName","context","WebSocket","roomId","onopen","contentLoading","token","localStorage","getItem","onmessage","payload","data","parse","users_connected","getUserMedia","video","audio","then","catch","error","console","log","message","user","find","eachUser","newPeersList","userPeer","newList","filter","destroy","componentWillUnmount","close","getTracks","track","stop","render","classes","floatingButtons","floatingButton","videoGrid","length","map","index","alert","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Peer from \"simple-peer\";\r\n\r\n// Material UI components\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport VolumeUpRoundedIcon from \"@material-ui/icons/VolumeUpRounded\";\r\nimport VolumeOffRoundedIcon from \"@material-ui/icons/VolumeOffRounded\";\r\nimport VideocamRoundedIcon from \"@material-ui/icons/VideocamRounded\";\r\nimport VideocamOffRoundedIcon from \"@material-ui/icons/VideocamOffRounded\";\r\nimport ExitToAppRoundedIcon from \"@material-ui/icons/ExitToAppRounded\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\n// Components\r\nimport Video from \"./Video\";\r\n\r\n// Utility components, functions, constants, objects...\r\nimport { UserInfoContext, webSocketUrl, AVAILABLE_PATHS } from \"../utilities\";\r\nimport videoRoomStyles from \"./video_room_styles\";\r\n\r\nexport class VideoRoom extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      websocket: null,\r\n      stream: null,\r\n      usersConnected: [],\r\n      peersEstablished: [],\r\n\r\n      isVideoMuted: false,\r\n      isAudioMuted: false,\r\n      contentLoading: true,\r\n\r\n      isVideoRoomAccessible: true,\r\n    };\r\n  }\r\n\r\n  muteVideo = () => {\r\n    const stream = document.getElementById(\"localVideo\").srcObject;\r\n    if (!stream.getVideoTracks()[0]) return;\r\n    stream.getVideoTracks()[0].enabled = !stream.getVideoTracks()[0].enabled;\r\n    this.setState({\r\n      isVideoMuted: !stream.getVideoTracks()[0].enabled,\r\n    });\r\n  };\r\n  muteAudio = () => {\r\n    const stream = document.getElementById(\"localVideo\").srcObject;\r\n    if (!stream.getAudioTracks()[0]) return;\r\n    stream.getAudioTracks()[0].enabled = !stream.getAudioTracks()[0].enabled;\r\n    this.setState({\r\n      isAudioMuted: !stream.getAudioTracks()[0].enabled,\r\n    });\r\n  };\r\n  leaveRoom = () => {\r\n    const { history } = this.props;\r\n    history.push(AVAILABLE_PATHS.LOBBY_PATH);\r\n  };\r\n\r\n  // Creates offer to send it to other user in the room\r\n  CreatePeer = (currentUserId, otherUserId, currentUserStream = null) => {\r\n\r\n    // User creates peer as initiator\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream: currentUserStream,\r\n    });\r\n\r\n    // Offer is sent\r\n    peer.on(\"signal\", (signal) => {\r\n      this.state.websocket.send(\r\n        JSON.stringify({\r\n          type: \"sending_offer\",\r\n          from: currentUserId,\r\n          to: otherUserId,\r\n          offer: signal,\r\n        })\r\n      );\r\n    });\r\n\r\n    // Peer is then returned\r\n    return peer;\r\n  };\r\n\r\n  // Creates answer in response to the offer received\r\n  addPeer = (\r\n    currentUserId,\r\n    otherUserId,\r\n    receivedOffer,\r\n    currentUserStream = null\r\n  ) => {\r\n\r\n    // User creates peer but not as an initiator \r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream: currentUserStream,\r\n    });\r\n\r\n\r\n    // The offer that was sent is set as remote description\r\n    peer.signal(receivedOffer);\r\n\r\n    // Answer is sent back to the user who sent the offer\r\n    peer.on(\"signal\", (signal) => {\r\n      this.state.websocket.send(\r\n        JSON.stringify({\r\n          type: \"sending_answer\",\r\n          from: currentUserId,\r\n          to: otherUserId,\r\n          answer: signal,\r\n        })\r\n      );\r\n    });\r\n\r\n     // Peer is then returned\r\n    return peer;\r\n  };\r\n\r\n  // Function to send offers to each users as initiator that are connected to the room\r\n  sendSignalsToAll = (currentUserId, stream = null) => {\r\n    const peers = [];\r\n    this.state.usersConnected.forEach((otherUser) => {\r\n      if (otherUser.user_id !== currentUserId) {\r\n        const peer = this.CreatePeer(currentUserId, otherUser.user_id, stream);\r\n        peers.push({\r\n          user_id: otherUser.user_id,\r\n          user_full_name: otherUser.user_full_name,\r\n          peer: peer,\r\n        });\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      peersEstablished: peers,\r\n    });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const {\r\n      printFeedback,\r\n      match: { params },\r\n    } = this.props;\r\n\r\n    // Checks whether 'navigator.mediaDevices' is available for this browser or not\r\n    if (!navigator.mediaDevices) {\r\n      this.setState({ isVideoRoomAccessible: false });\r\n      printFeedback({\r\n        type: \"error\",\r\n        feedbackMsg:\r\n          \"this video room is not accessible because the site is not running on secure protocol, i.e. 'HTTPS'\",\r\n      });\r\n      return;\r\n    }\r\n    // Extracting current user info\r\n    const { userId, userFullName } = this.context;\r\n\r\n    // Websocket connection is made\r\n    const websocket = new WebSocket(webSocketUrl() + `${params.roomId}/`);\r\n    this.setState({\r\n      websocket: websocket,\r\n    });\r\n\r\n    websocket.onopen = () => {\r\n      this.setState({\r\n        contentLoading: true,\r\n      });\r\n\r\n      // Send all users in the room new user joined\r\n      websocket.send(\r\n        JSON.stringify({\r\n          type: \"new_user_joined\",\r\n          from: userId,\r\n          user_full_name: userFullName,\r\n          token: localStorage.getItem(\"access_token\"),\r\n        })\r\n      );\r\n    };\r\n\r\n    websocket.onmessage = (payload) => {\r\n      // Message from backend\r\n      const data = JSON.parse(payload.data);\r\n\r\n      switch (data.type) {\r\n        case \"new_user_joined\":\r\n          this.setState({\r\n            usersConnected: data.users_connected,\r\n          });\r\n\r\n          // If user joined is current user, the user is requested to enable the media devices and offer is created and sent to other user\r\n          if (userId === data.from) {\r\n            navigator.mediaDevices\r\n              .getUserMedia({\r\n                video: true,\r\n                audio: true,\r\n              })\r\n              .then((stream) => {\r\n                this.setState({ stream: stream });\r\n                document.getElementById(\"localVideo\").srcObject = stream;\r\n                this.sendSignalsToAll(userId, stream);\r\n              })\r\n              .catch((error) => {\r\n                this.setState({ isVideoRoomAccessible: false });\r\n                printFeedback({\r\n                  type: \"error\",\r\n                  feedbackMsg:\r\n                    \"you need to enable media devices inorder to use access this room\",\r\n                });\r\n                console.log(error.message);\r\n                return;\r\n              });\r\n          }\r\n\r\n          // Message is send to other user that new user joined\r\n          if (userId !== data.from) {\r\n            const user = this.state.usersConnected.find(\r\n              (eachUser) => eachUser.user_id === data.from\r\n            );\r\n            printFeedback({\r\n              type: \"success\",\r\n              feedbackMsg: `${user.user_full_name} joined this room`,\r\n            });\r\n            console.log(`User No. ${data.from} joined this room`);\r\n          }\r\n          break;\r\n\r\n        // Offer is received here by others who then store it in there state and sends the answer\r\n        case \"sending_offer\":\r\n          if (data.to === userId) {\r\n            console.log(\"offer_received\");\r\n            const peer = this.addPeer(\r\n              userId,\r\n              data.from,\r\n              data.offer,\r\n              this.state.stream\r\n            );\r\n            this.setState(({ peersEstablished }) => {\r\n              const user = this.state.usersConnected.find(\r\n                (eachUser) => eachUser.user_id === data.from\r\n              );\r\n              let newPeersList = [\r\n                ...peersEstablished,\r\n                {\r\n                  user_id: data.from,\r\n                  user_full_name: user.user_full_name,\r\n                  peer: peer,\r\n                },\r\n              ];\r\n\r\n              // Checks whether the peer with same user id exists in the 'peersEstablished' state, that peer is then removed\r\n              const userPeer = this.state.peersEstablished.find(\r\n                (eachUser) => eachUser.user_id === data.from\r\n              );\r\n              if (userPeer) {\r\n                const newList = this.state.peersEstablished.filter(\r\n                  (peer) => userPeer.user_id !== peer.user_id\r\n                );\r\n\r\n                newPeersList = [\r\n                  ...newList,\r\n                  {\r\n                    user_id: data.from,\r\n                    user_full_name: user.user_full_name,\r\n                    peer: peer,\r\n                  },\r\n                ];\r\n              }\r\n\r\n              return {\r\n                peersEstablished: newPeersList,\r\n              };\r\n            });\r\n          }\r\n          break;\r\n\r\n        // Answer is received here by the user who just joined\r\n        case \"sending_answer\":\r\n          if (data.to === userId) {\r\n            console.log(\"answer_received\");\r\n            const userPeer = this.state.peersEstablished.find(\r\n              (eachUser) => eachUser.user_id === data.from\r\n            );\r\n\r\n            // Answer is set as remote description\r\n            userPeer.peer.signal(data.answer);\r\n          }\r\n\r\n          break;\r\n        case \"disconnected\":\r\n          if (data.from !== userId) {\r\n            const user = this.state.usersConnected.find(\r\n              (eachUser) => eachUser.user_id === data.from\r\n            );\r\n\r\n            // Feedback is sent to users about who just disconnected\r\n            if (user) {\r\n              console.log(`User No. ${data.from} disconnected`);\r\n              printFeedback({\r\n                type: \"error\",\r\n                feedbackMsg: `${user.user_full_name} left`,\r\n              });\r\n\r\n              // Peer associated with the user that just disconnected is destroyed\r\n              const userPeer = this.state.peersEstablished.find(\r\n                (eachUser) => eachUser.user_id === data.from\r\n              );\r\n              if (userPeer) {\r\n                userPeer.peer.destroy();\r\n                const newPeersList = this.state.peersEstablished.filter(\r\n                  (peer) => userPeer.user_id !== peer.user_id\r\n                );\r\n                this.setState({ peersEstablished: newPeersList });\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    // Websocket is closed\r\n    const { websocket, peersEstablished, stream } = this.state;\r\n    if (websocket) {\r\n      this.state.websocket.close();\r\n    }\r\n\r\n    // All peers is destroyed\r\n    peersEstablished.forEach(({ peer }) => {\r\n      peer.destroy();\r\n    });\r\n\r\n    // Streams are stopped\r\n    if (stream) {\r\n      stream.getTracks().forEach((track) => {\r\n        track.stop();\r\n      });\r\n    }\r\n\r\n    // All state is cleared\r\n    this.setState({\r\n      websocket: null,\r\n      stream: null,\r\n      usersConnected: [],\r\n      peersEstablished: [],\r\n\r\n      isVideoMuted: true,\r\n      isAudioMuted: true,\r\n    });\r\n  };\r\n\r\n  static contextType = UserInfoContext;\r\n  render() {\r\n    const {\r\n      isVideoRoomAccessible,\r\n      isVideoMuted,\r\n      isAudioMuted,\r\n      peersEstablished,\r\n    } = this.state;\r\n\r\n    const { userFullName } = this.context;\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        {isVideoRoomAccessible ? (\r\n          <>\r\n            {/* Action Buttons */}\r\n            <div className={classes.floatingButtons}>\r\n              {/* Video Mute/Unmute */}\r\n              <Tooltip title=\"Video ON/OFF\">\r\n                <Fab\r\n                  className={classes.floatingButton}\r\n                  onClick={this.muteVideo}\r\n                  color=\"inherit\"\r\n                >\r\n                  {isVideoMuted ? (\r\n                    <VideocamOffRoundedIcon />\r\n                  ) : (\r\n                    <VideocamRoundedIcon />\r\n                  )}\r\n                </Fab>\r\n              </Tooltip>\r\n\r\n              {/* Audio Mute/Unmute */}\r\n              <Tooltip title=\"Audio ON/OFF\">\r\n                <Fab\r\n                  className={classes.floatingButton}\r\n                  onClick={this.muteAudio}\r\n                  color=\"inherit\"\r\n                >\r\n                  {isAudioMuted ? (\r\n                    <VolumeOffRoundedIcon />\r\n                  ) : (\r\n                    <VolumeUpRoundedIcon />\r\n                  )}\r\n                </Fab>\r\n              </Tooltip>\r\n\r\n              {/* Leave Room */}\r\n              <Tooltip title=\"Leave Room\">\r\n                <Fab\r\n                  onClick={this.leaveRoom}\r\n                  className={classes.floatingButton}\r\n                  color=\"secondary\"\r\n                >\r\n                  <ExitToAppRoundedIcon />\r\n                </Fab>\r\n              </Tooltip>\r\n            </div>\r\n\r\n            {/* Locale Video */}\r\n            <Video isLocalUser id=\"localVideo\" user_full_name={userFullName} />\r\n\r\n            {/* Remote Videos */}\r\n            <div className={classes.videoGrid}>\r\n              {peersEstablished.length > 0 ? (\r\n                peersEstablished.map((userPeer, index) => (\r\n                  <Video\r\n                    key={index}\r\n                    id={`remote-${userPeer.user_id}`}\r\n                    user_id={userPeer.user_id}\r\n                    user_full_name={userPeer.user_full_name}\r\n                    peer={userPeer.peer}\r\n                  />\r\n                ))\r\n              ) : (\r\n                <Alert severity=\"info\">No one joined yet!!</Alert>\r\n              )}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          // Error displayed if something goes wrong\r\n          <Alert className={classes.alert} severity=\"error\">\r\n            This room is not accessible. Please make sure you enabled your media\r\n            devices\r\n          </Alert>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(videoRoomStyles)(VideoRoom);\r\n"]},"metadata":{},"sourceType":"module"}