{"ast":null,"code":"var _jsxFileName = \"D:\\\\expresio\\\\frontend\\\\src\\\\components\\\\authentication\\\\Register.jsx\";\nimport React, { Component } from \"react\";\nimport { Formik, Form } from \"formik\"; // Material UI components\n\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles } from \"@material-ui/core/styles\"; // Utility components, functions, constants, objects...\n\nimport { FormikUIField, registerValidationSchema, axiosInstance, RouterUILink } from \"../utilities\";\nimport formStyles from \"./form_styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst passwordHelperText = [\"Your password can’t be too similar to your other personal information.\", \"Your password must contain at least 8 characters.\", \"Your password can’t be a commonly used password. \", \"Your password can’t be entirely numeric.\"];\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      serverErrors: \"\"\n    };\n    this.onSubmitRegisterForm = this.onSubmitRegisterForm.bind(this);\n  } // Submission form\n\n\n  onSubmitRegisterForm(data) {\n    const userData = {\n      username: data.username,\n      firstName: data.firstName,\n      lastName: data.lastName,\n      password: data.password,\n      email: data.username\n    };\n    const {\n      history,\n      redirectPath,\n      authenticateUser,\n      printFeedback\n    } = this.props; // Sends post requests\n\n    axiosInstance.post(\"user/create/\", userData).then(_ref => {\n      let {\n        data: {\n          tokens\n        }\n      } = _ref;\n      // Tokens are added to headers upcoming requests\n      // And they stored in local storage\n      axiosInstance.defaults.headers[\"Authorization\"] = \"Bearer \" + tokens.access;\n      localStorage.setItem(\"access_token\", tokens.access);\n      localStorage.setItem(\"refresh_token\", tokens.refresh); // User is then authenticated and redirected to lobby with print feedback message\n\n      authenticateUser();\n      history.push(redirectPath);\n      printFeedback({\n        type: \"success\",\n        feedbackMsg: \"You are registered and logged in\"\n      });\n    }).catch(error => {\n      console.log(error.message); // Server error is set to state to display down in component\n\n      if (error.response) {\n        this.setState({\n          serverErrors: Object.values(error.response.data)\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    let initialValues = {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      password: \"\",\n      confirmation: \"\"\n    };\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.formPaper,\n      elevation: 3,\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        onSubmit: this.onSubmitRegisterForm,\n        validationSchema: registerValidationSchema,\n        children: _ref2 => {\n          let {\n            dirty,\n            isValid,\n            errors,\n            touched\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              align: \"center\",\n              variant: \"h3\",\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.fullName,\n              children: [/*#__PURE__*/_jsxDEV(FormikUIField, {\n                fullWidth: true,\n                name: \"firstName\",\n                label: \"First Name\",\n                type: \"text\",\n                required: true,\n                error: errors.firstName && touched.firstName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormikUIField, {\n                fullWidth: true,\n                name: \"lastName\",\n                label: \"Last Name\",\n                type: \"text\",\n                required: true,\n                error: errors.lastName && touched.lastName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormikUIField, {\n              name: \"username\",\n              label: \"Email\",\n              type: \"username\",\n              fullWidth: true,\n              required: true,\n              error: errors.username && touched.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormikUIField, {\n              name: \"password\",\n              label: \"Password\",\n              type: \"password\",\n              fullWidth: true,\n              required: true,\n              error: errors.password && touched.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), passwordHelperText.map((text, index) => /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(FormikUIField, {\n              name: \"confirmation\",\n              label: \"Confirm Password\",\n              type: \"password\",\n              fullWidth: true,\n              required: true,\n              error: errors.confirmation && touched.confirmation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n              children: \"Enter the same password as before, for verification.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this), this.state.serverErrors ? this.state.serverErrors.map((error, index) => /*#__PURE__*/_jsxDEV(FormHelperText, {\n              error: true,\n              children: error\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 21\n            }, this)) : null, /*#__PURE__*/_jsxDEV(Button, {\n              fullWidth: true,\n              className: classes.formButton,\n              type: \"submit\",\n              variant: \"contained\",\n              color: \"primary\",\n              disabled: !dirty || !isValid,\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              display: \"block\",\n              variant: \"caption\",\n              children: [\"already have an account?\", /*#__PURE__*/_jsxDEV(RouterUILink, {\n                linkTo: \"/login\",\n                innerText: \"Log In\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default withStyles(formStyles)(Register);","map":{"version":3,"sources":["D:/expresio/frontend/src/components/authentication/Register.jsx"],"names":["React","Component","Formik","Form","FormHelperText","Button","Paper","Typography","withStyles","FormikUIField","registerValidationSchema","axiosInstance","RouterUILink","formStyles","passwordHelperText","Register","constructor","props","state","serverErrors","onSubmitRegisterForm","bind","data","userData","username","firstName","lastName","password","email","history","redirectPath","authenticateUser","printFeedback","post","then","tokens","defaults","headers","access","localStorage","setItem","refresh","push","type","feedbackMsg","catch","error","console","log","message","response","setState","Object","values","render","classes","initialValues","confirmation","formPaper","dirty","isValid","errors","touched","fullName","map","text","index","formButton"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\n\r\n// Material UI components\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n// Utility components, functions, constants, objects...\r\nimport {\r\n  FormikUIField,\r\n  registerValidationSchema,\r\n  axiosInstance,\r\n  RouterUILink,\r\n} from \"../utilities\";\r\nimport formStyles from \"./form_styles\";\r\n\r\nconst passwordHelperText = [\r\n  \"Your password can’t be too similar to your other personal information.\",\r\n  \"Your password must contain at least 8 characters.\",\r\n  \"Your password can’t be a commonly used password. \",\r\n  \"Your password can’t be entirely numeric.\",\r\n];\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      serverErrors: \"\",\r\n    };\r\n    this.onSubmitRegisterForm = this.onSubmitRegisterForm.bind(this);\r\n  }\r\n\r\n  // Submission form\r\n  onSubmitRegisterForm(data) {\r\n    const userData = {\r\n      username: data.username,\r\n      firstName: data.firstName,\r\n      lastName: data.lastName,\r\n      password: data.password,\r\n      email: data.username,\r\n    };\r\n    const {\r\n      history,\r\n      redirectPath,\r\n      authenticateUser,\r\n      printFeedback,\r\n    } = this.props;\r\n\r\n    // Sends post requests\r\n    axiosInstance\r\n      .post(\"user/create/\", userData)\r\n      .then(({ data: { tokens } }) => {\r\n        // Tokens are added to headers upcoming requests\r\n        // And they stored in local storage\r\n        axiosInstance.defaults.headers[\"Authorization\"] =\r\n          \"Bearer \" + tokens.access;\r\n        localStorage.setItem(\"access_token\", tokens.access);\r\n        localStorage.setItem(\"refresh_token\", tokens.refresh);\r\n\r\n        // User is then authenticated and redirected to lobby with print feedback message\r\n        authenticateUser();\r\n        history.push(redirectPath);\r\n        printFeedback({\r\n          type: \"success\",\r\n          feedbackMsg: \"You are registered and logged in\",\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n\r\n        // Server error is set to state to display down in component\r\n        if (error.response) {\r\n          this.setState({\r\n            serverErrors: Object.values(error.response.data),\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    let initialValues = {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      username: \"\",\r\n      password: \"\",\r\n      confirmation: \"\",\r\n    };\r\n    return (\r\n      <Paper className={classes.formPaper} elevation={3}>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={this.onSubmitRegisterForm}\r\n          validationSchema={registerValidationSchema}\r\n        >\r\n          {({ dirty, isValid, errors, touched }) => (\r\n            <Form>\r\n              <Typography align=\"center\" variant=\"h3\">\r\n                Register\r\n              </Typography>\r\n\r\n              <div className={classes.fullName}>\r\n                {/* First Name */}\r\n                <FormikUIField\r\n                  fullWidth\r\n                  name=\"firstName\"\r\n                  label=\"First Name\"\r\n                  type=\"text\"\r\n                  required\r\n                  error={errors.firstName && touched.firstName}\r\n                />\r\n\r\n                {/* Last Name */}\r\n                <FormikUIField\r\n                  fullWidth\r\n                  name=\"lastName\"\r\n                  label=\"Last Name\"\r\n                  type=\"text\"\r\n                  required\r\n                  error={errors.lastName && touched.lastName}\r\n                />\r\n              </div>\r\n\r\n              {/* Email */}\r\n              <FormikUIField\r\n                name=\"username\"\r\n                label=\"Email\"\r\n                type=\"username\"\r\n                fullWidth\r\n                required\r\n                error={errors.username && touched.username}\r\n              />\r\n              <FormikUIField\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                required\r\n                error={errors.password && touched.password}\r\n              />\r\n              {passwordHelperText.map((text, index) => (\r\n                <FormHelperText key={index}>{text}</FormHelperText>\r\n              ))}\r\n\r\n              {/* Password */}\r\n              <FormikUIField\r\n                name=\"confirmation\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                required\r\n                error={errors.confirmation && touched.confirmation}\r\n              />\r\n              <FormHelperText>\r\n                Enter the same password as before, for verification.\r\n              </FormHelperText>\r\n              {/* Server Errors */}\r\n              {this.state.serverErrors\r\n                ? this.state.serverErrors.map((error, index) => (\r\n                    <FormHelperText key={index} error>\r\n                      {error}\r\n                    </FormHelperText>\r\n                  ))\r\n                : null}\r\n\r\n              {/* Register Button */}\r\n              <Button\r\n                fullWidth\r\n                className={classes.formButton}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={!dirty || !isValid}\r\n              >\r\n                Register\r\n              </Button>\r\n\r\n              {/* Link to Login page */}\r\n              <Typography display=\"block\" variant=\"caption\">\r\n                already have an account?\r\n                <RouterUILink linkTo=\"/login\" innerText=\"Log In\" />\r\n              </Typography>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(formStyles)(Register);\r\n"]},"metadata":{},"sourceType":"module"}