{"ast":null,"code":"var _jsxFileName = \"D:\\\\expresio\\\\frontend\\\\src\\\\components\\\\authentication\\\\Login.jsx\";\nimport React, { Component } from \"react\";\nimport { Formik, Form } from \"formik\"; // Material UI components\n\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles } from \"@material-ui/core/styles\"; // Utility components, functions, constants, objects...\n\nimport { FormikUIField, loginValidationSchema, axiosInstance, RouterUILink } from \"../utilities\";\nimport formStyles from \"./form_styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      serverErrors: \"\"\n    };\n    this.onSubmitLoginForm = this.onSubmitLoginForm.bind(this);\n  } // Submission form\n\n\n  onSubmitLoginForm(data) {\n    const userData = {\n      username: data.username,\n      password: data.password\n    };\n    const {\n      history,\n      redirectPath,\n      authenticateUser,\n      printFeedback\n    } = this.props; // Sends post requests\n\n    axiosInstance.post(\"token/\", userData).then(_ref => {\n      let {\n        data\n      } = _ref;\n      // Tokens are added to headers upcoming requests\n      // And they stored in local storage\n      axiosInstance.defaults.headers[\"Authorization\"] = \"Bearer \" + data.access;\n      localStorage.setItem(\"access_token\", data.access);\n      localStorage.setItem(\"refresh_token\", data.refresh); // User is then authenticated and redirected to lobby with print feedback message\n\n      authenticateUser();\n      history.push(redirectPath);\n      printFeedback({\n        type: \"success\",\n        feedbackMsg: \"You are logged in\"\n      });\n    }).catch(error => {\n      console.log(error.message); // Server error is set to state to display down in component\n\n      if (error.response) {\n        this.setState({\n          serverErrors: Object.values(error.response.data)\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    let initialValues = {\n      username: \"\",\n      password: \"\"\n    };\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.formPaper,\n      elevation: 3,\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        onSubmit: this.onSubmitLoginForm,\n        validationSchema: loginValidationSchema,\n        children: _ref2 => {\n          let {\n            dirty,\n            isValid,\n            errors,\n            touched\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              align: \"center\",\n              variant: \"h3\",\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormikUIField, {\n              name: \"username\",\n              label: \"Email\",\n              type: \"username\",\n              fullWidth: true,\n              required: true,\n              error: errors.username && touched.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormikUIField, {\n              name: \"password\",\n              label: \"Password\",\n              type: \"password\",\n              fullWidth: true,\n              required: true,\n              error: errors.password && touched.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), this.state.serverErrors ? this.state.serverErrors.map((error, index) => /*#__PURE__*/_jsxDEV(FormHelperText, {\n              error: true,\n              children: error\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 21\n            }, this)) : null, /*#__PURE__*/_jsxDEV(Button, {\n              fullWidth: true,\n              className: classes.formButton,\n              type: \"submit\",\n              variant: \"contained\",\n              color: \"primary\",\n              disabled: !dirty || !isValid,\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              display: \"block\",\n              variant: \"caption\",\n              children: [\"not a member?\", /*#__PURE__*/_jsxDEV(RouterUILink, {\n                linkTo: \"/register\",\n                innerText: \"Register\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default withStyles(formStyles)(Login);","map":{"version":3,"sources":["D:/expresio/frontend/src/components/authentication/Login.jsx"],"names":["React","Component","Formik","Form","FormHelperText","Button","Paper","Typography","withStyles","FormikUIField","loginValidationSchema","axiosInstance","RouterUILink","formStyles","Login","constructor","props","state","serverErrors","onSubmitLoginForm","bind","data","userData","username","password","history","redirectPath","authenticateUser","printFeedback","post","then","defaults","headers","access","localStorage","setItem","refresh","push","type","feedbackMsg","catch","error","console","log","message","response","setState","Object","values","render","classes","initialValues","formPaper","dirty","isValid","errors","touched","map","index","formButton"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\n\r\n// Material UI components\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n// Utility components, functions, constants, objects...\r\nimport {\r\n  FormikUIField,\r\n  loginValidationSchema,\r\n  axiosInstance,\r\n  RouterUILink,\r\n} from \"../utilities\";\r\nimport formStyles from \"./form_styles\";\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      serverErrors: \"\",\r\n    };\r\n    this.onSubmitLoginForm = this.onSubmitLoginForm.bind(this);\r\n  }\r\n\r\n  // Submission form\r\n  onSubmitLoginForm(data) {\r\n    const userData = {\r\n      username: data.username,\r\n      password: data.password,\r\n    };\r\n    const {\r\n      history,\r\n      redirectPath,\r\n      authenticateUser,\r\n      printFeedback,\r\n    } = this.props;\r\n\r\n    // Sends post requests\r\n    axiosInstance\r\n      .post(\"token/\", userData)\r\n      .then(({ data }) => {\r\n        // Tokens are added to headers upcoming requests\r\n        // And they stored in local storage\r\n        axiosInstance.defaults.headers[\"Authorization\"] =\r\n          \"Bearer \" + data.access;\r\n        localStorage.setItem(\"access_token\", data.access);\r\n        localStorage.setItem(\"refresh_token\", data.refresh);\r\n\r\n        // User is then authenticated and redirected to lobby with print feedback message\r\n        authenticateUser();\r\n        history.push(redirectPath);\r\n        printFeedback({ type: \"success\", feedbackMsg: \"You are logged in\" });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n\r\n        // Server error is set to state to display down in component\r\n        if (error.response) {\r\n          this.setState({\r\n            serverErrors: Object.values(error.response.data),\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    let initialValues = {\r\n      username: \"\",\r\n      password: \"\",\r\n    };\r\n    return (\r\n      <Paper className={classes.formPaper} elevation={3}>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={this.onSubmitLoginForm}\r\n          validationSchema={loginValidationSchema}\r\n        >\r\n          {({ dirty, isValid, errors, touched }) => (\r\n            <Form>\r\n              <Typography align=\"center\" variant=\"h3\">\r\n                Login\r\n              </Typography>\r\n\r\n              {/* Email */}\r\n              <FormikUIField\r\n                name=\"username\"\r\n                label=\"Email\"\r\n                type=\"username\"\r\n                fullWidth\r\n                required\r\n                error={errors.username && touched.username}\r\n              />\r\n\r\n              {/* Password */}\r\n              <FormikUIField\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                required\r\n                error={errors.password && touched.password}\r\n              />\r\n\r\n              {/* Server side error */}\r\n              {this.state.serverErrors\r\n                ? this.state.serverErrors.map((error, index) => (\r\n                    <FormHelperText key={index} error>\r\n                      {error}\r\n                    </FormHelperText>\r\n                  ))\r\n                : null}\r\n\r\n              {/* Login Button */}\r\n              <Button\r\n                fullWidth\r\n                className={classes.formButton}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={!dirty || !isValid}\r\n              >\r\n                Login\r\n              </Button>\r\n\r\n              {/* Link to registor page */}\r\n              <Typography display=\"block\" variant=\"caption\">\r\n                not a member?\r\n                <RouterUILink linkTo=\"/register\" innerText=\"Register\" />\r\n              </Typography>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(formStyles)(Login);\r\n"]},"metadata":{},"sourceType":"module"}