{"ast":null,"code":"var _jsxFileName = \"D:\\\\expresio\\\\frontend\\\\src\\\\Routes.jsx\";\nimport React, { Component } from \"react\";\nimport { HashRouter as Router, Switch } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\"; // Components\n\nimport { Login, Register, AuthenticationRoute, LobbyRoute, NavigationBar, VideoRoomRoute } from \"./components\"; // Utility components, functions, constants, objects...\n\nimport { Feedback, UserInfoProvider, AVAILABLE_PATHS, axiosInstance, validateToken, refreshingAccessToken, getRoomsList, Loading } from \"./components/utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Routes extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.loadRooms = function () {\n      let search = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      _this.setState({\n        loadingRooms: true\n      });\n\n      getRoomsList(axiosInstance, search).then(res => {\n        const access_token = localStorage.getItem(\"access_token\");\n        axiosInstance.defaults.headers[\"Authorization\"] = \"Bearer \" + access_token;\n\n        _this.setState(() => ({\n          roomListData: res.data,\n          loadingRooms: false\n        }));\n      }).catch(error => {\n        _this.setState(() => ({\n          loadingRooms: false\n        }));\n\n        _this.printFeedback({\n          type: \"error\",\n          feedbackMsg: error.message\n        });\n\n        console.log(error.message);\n      });\n    };\n\n    this.handleSearchChanges = async event => {\n      await this.setState({\n        search: event.target.value\n      });\n      await this.loadRooms(this.state.search);\n    };\n\n    this.printFeedback = _ref => {\n      let {\n        type,\n        feedbackMsg\n      } = _ref;\n\n      switch (type) {\n        case \"success\":\n          this.setState({\n            severity: \"success\",\n            feedbackMsg: feedbackMsg,\n            isFeedbackOpen: true\n          });\n          break;\n\n        case \"error\":\n          this.setState({\n            severity: \"error\",\n            feedbackMsg: feedbackMsg,\n            isFeedbackOpen: true\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.closeFeedback = (event, reason) => {\n      if (reason === \"clickaway\") {\n        return;\n      }\n\n      this.setState({\n        isFeedbackOpen: false\n      });\n    };\n\n    this.authenticateUser = () => {\n      const refresh_token = localStorage.getItem(\"refresh_token\"); // Checks the refresh token is valid which then determines whether user is logged-in or not\n\n      validateToken(axiosInstance, refresh_token).then(response => {\n        if (response.status === 200) {\n          const userId = jwt_decode(refresh_token).user_id;\n          const userFullName = jwt_decode(refresh_token).full_name;\n          this.setState({\n            userData: {\n              isDataArrived: true,\n              userId: userId,\n              userFullName: userFullName,\n              isUserLoggedIn: true\n            }\n          }); // If the refresh token is valid then access token is refreshed\n\n          refreshingAccessToken();\n        }\n      }).catch(error => {\n        console.log(error.message);\n        localStorage.removeItem(\"access_token\");\n        localStorage.removeItem(\"refresh_token\");\n        this.setState({\n          userData: {\n            isDataArrived: true,\n            userId: null,\n            userFullName: \"\",\n            isUserLoggedIn: false\n          }\n        });\n      });\n    };\n\n    this.componentDidMount = () => {\n      // checks authentication when components mounts\n      this.authenticateUser();\n    };\n\n    this.state = {\n      // User information\n      userData: {\n        isDataArrived: false,\n        userId: null,\n        userFullName: \"\",\n        isUserLoggedIn: false\n      },\n      isRoomFormOpen: false,\n      // For Feedback method\n      severity: \"\",\n      feedbackMsg: \"\",\n      isFeedbackOpen: false,\n      // Related to room list\n      roomListData: [],\n      loadingRooms: true,\n      search: \"\"\n    }; // Loading list of rooms\n\n    this.loadRooms = this.loadRooms.bind(this);\n    this.handleSearchChanges = this.handleSearchChanges.bind(this); // Opening and closing of form\n\n    this.closeRoomForm = this.closeRoomForm.bind(this);\n    this.openRoomForm = this.openRoomForm.bind(this); // Feedback messages\n\n    this.printFeedback = this.printFeedback.bind(this);\n    this.closeFeedback = this.closeFeedback.bind(this); // User authentication and refreshing access token\n\n    this.authenticateUser = this.authenticateUser.bind(this);\n  } // Method to load all the rooms\n\n\n  closeRoomForm() {\n    this.setState({\n      isRoomFormOpen: false\n    });\n  }\n\n  openRoomForm() {\n    this.setState({\n      isRoomFormOpen: true\n    });\n  } // Method for printing feedback to user\n\n\n  render() {\n    const {\n      LOBBY_PATH,\n      LOGIN_PATH,\n      REGISTER_PATH,\n      VIDEO_ROOM_PATH\n    } = AVAILABLE_PATHS;\n    const {\n      userData,\n      isRoomFormOpen,\n      roomListData,\n      loadingRooms,\n      search,\n      severity,\n      feedbackMsg,\n      isFeedbackOpen\n    } = this.state;\n    const authenticationProps = {\n      isUserLoggedIn: userData.isUserLoggedIn,\n      printFeedback: this.printFeedback,\n      authenticateUser: this.authenticateUser\n    };\n    const lobbyProps = {\n      userData: userData,\n      loadingRooms: loadingRooms,\n      roomListData: roomListData,\n      loadRooms: this.loadRooms,\n      printFeedback: this.printFeedback,\n      closeRoomForm: this.closeRoomForm,\n      isRoomFormOpen: isRoomFormOpen\n    };\n    const navProps = {\n      search: search,\n      handleSearchChanges: this.handleSearchChanges,\n      authenticateUser: this.authenticateUser,\n      openRoomForm: this.openRoomForm,\n      printFeedback: this.printFeedback\n    };\n    return userData.isDataArrived ? /*#__PURE__*/_jsxDEV(UserInfoProvider, {\n      userData: userData,\n      children: /*#__PURE__*/_jsxDEV(Router, {\n        basename: \"/app\",\n        children: [/*#__PURE__*/_jsxDEV(NavigationBar, { ...navProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Feedback, {\n          closeFeedback: this.closeFeedback,\n          isFeedbackOpen: isFeedbackOpen,\n          severity: severity,\n          feedbackMsg: feedbackMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(LobbyRoute, {\n            exact: true,\n            path: LOBBY_PATH,\n            lobbyProps: lobbyProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AuthenticationRoute, {\n            exact: true,\n            path: LOGIN_PATH,\n            component: Login,\n            authenticationProps: authenticationProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AuthenticationRoute, {\n            exact: true,\n            path: REGISTER_PATH,\n            component: Register,\n            authenticationProps: authenticationProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(VideoRoomRoute, {\n            exact: true,\n            path: VIDEO_ROOM_PATH,\n            userData: userData,\n            printFeedback: this.printFeedback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default Routes;","map":{"version":3,"sources":["D:/expresio/frontend/src/Routes.jsx"],"names":["React","Component","HashRouter","Router","Switch","jwt_decode","Login","Register","AuthenticationRoute","LobbyRoute","NavigationBar","VideoRoomRoute","Feedback","UserInfoProvider","AVAILABLE_PATHS","axiosInstance","validateToken","refreshingAccessToken","getRoomsList","Loading","Routes","constructor","props","loadRooms","search","setState","loadingRooms","then","res","access_token","localStorage","getItem","defaults","headers","roomListData","data","catch","error","printFeedback","type","feedbackMsg","message","console","log","handleSearchChanges","event","target","value","state","severity","isFeedbackOpen","closeFeedback","reason","authenticateUser","refresh_token","response","status","userId","user_id","userFullName","full_name","userData","isDataArrived","isUserLoggedIn","removeItem","componentDidMount","isRoomFormOpen","bind","closeRoomForm","openRoomForm","render","LOBBY_PATH","LOGIN_PATH","REGISTER_PATH","VIDEO_ROOM_PATH","authenticationProps","lobbyProps","navProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { HashRouter as Router, Switch } from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n// Components\r\nimport {\r\n  Login,\r\n  Register,\r\n  AuthenticationRoute,\r\n  LobbyRoute,\r\n  NavigationBar,\r\n  VideoRoomRoute,\r\n} from \"./components\";\r\n\r\n// Utility components, functions, constants, objects...\r\nimport {\r\n  Feedback,\r\n  UserInfoProvider,\r\n  AVAILABLE_PATHS,\r\n  axiosInstance,\r\n  validateToken,\r\n  refreshingAccessToken,\r\n  getRoomsList,\r\n  Loading,\r\n} from \"./components/utilities\";\r\n\r\nexport class Routes extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // User information\r\n      userData: {\r\n        isDataArrived: false,\r\n        userId: null,\r\n        userFullName: \"\",\r\n        isUserLoggedIn: false,\r\n      },\r\n      isRoomFormOpen: false,\r\n\r\n      // For Feedback method\r\n      severity: \"\",\r\n      feedbackMsg: \"\",\r\n      isFeedbackOpen: false,\r\n\r\n      // Related to room list\r\n      roomListData: [],\r\n      loadingRooms: true,\r\n      search: \"\",\r\n    };\r\n\r\n    // Loading list of rooms\r\n    this.loadRooms = this.loadRooms.bind(this);\r\n    this.handleSearchChanges = this.handleSearchChanges.bind(this);\r\n\r\n    // Opening and closing of form\r\n    this.closeRoomForm = this.closeRoomForm.bind(this);\r\n    this.openRoomForm = this.openRoomForm.bind(this);\r\n\r\n    // Feedback messages\r\n    this.printFeedback = this.printFeedback.bind(this);\r\n    this.closeFeedback = this.closeFeedback.bind(this);\r\n\r\n    // User authentication and refreshing access token\r\n    this.authenticateUser = this.authenticateUser.bind(this);\r\n  }\r\n\r\n  // Method to load all the rooms\r\n  loadRooms = (search = \"\") => {\r\n    this.setState({\r\n      loadingRooms: true,\r\n    });\r\n    getRoomsList(axiosInstance, search)\r\n      .then((res) => {\r\n        const access_token = localStorage.getItem(\"access_token\");\r\n        axiosInstance.defaults.headers[\"Authorization\"] =\r\n          \"Bearer \" + access_token;\r\n        this.setState(() => ({ roomListData: res.data, loadingRooms: false }));\r\n      })\r\n      .catch((error) => {\r\n        this.setState(() => ({ loadingRooms: false }));\r\n        this.printFeedback({ type: \"error\", feedbackMsg: error.message });\r\n        console.log(error.message);\r\n      });\r\n  };\r\n\r\n  // Method runs whenever search is used\r\n  handleSearchChanges = async (event) => {\r\n    await this.setState({\r\n      search: event.target.value,\r\n    });\r\n    await this.loadRooms(this.state.search);\r\n  };\r\n\r\n  closeRoomForm() {\r\n    this.setState({\r\n      isRoomFormOpen: false,\r\n    });\r\n  }\r\n  openRoomForm() {\r\n    this.setState({\r\n      isRoomFormOpen: true,\r\n    });\r\n  }\r\n\r\n  // Method for printing feedback to user\r\n  printFeedback = ({ type, feedbackMsg }) => {\r\n    switch (type) {\r\n      case \"success\":\r\n        this.setState({\r\n          severity: \"success\",\r\n          feedbackMsg: feedbackMsg,\r\n          isFeedbackOpen: true,\r\n        });\r\n        break;\r\n      case \"error\":\r\n        this.setState({\r\n          severity: \"error\",\r\n          feedbackMsg: feedbackMsg,\r\n          isFeedbackOpen: true,\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Closing feedback message\r\n  closeFeedback = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isFeedbackOpen: false,\r\n    });\r\n  };\r\n\r\n  // Checks whether is logged in or not\r\n  // Depending upon that userData is populated\r\n  authenticateUser = () => {\r\n    const refresh_token = localStorage.getItem(\"refresh_token\");\r\n\r\n    // Checks the refresh token is valid which then determines whether user is logged-in or not\r\n    validateToken(axiosInstance, refresh_token)\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          const userId = jwt_decode(refresh_token).user_id;\r\n          const userFullName = jwt_decode(refresh_token).full_name;\r\n          this.setState({\r\n            userData: {\r\n              isDataArrived: true,\r\n              userId: userId,\r\n              userFullName: userFullName,\r\n              isUserLoggedIn: true,\r\n            },\r\n          });\r\n\r\n          // If the refresh token is valid then access token is refreshed\r\n          refreshingAccessToken();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n        localStorage.removeItem(\"access_token\");\r\n        localStorage.removeItem(\"refresh_token\");\r\n        this.setState({\r\n          userData: {\r\n            isDataArrived: true,\r\n            userId: null,\r\n            userFullName: \"\",\r\n            isUserLoggedIn: false,\r\n          },\r\n        });\r\n      });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    // checks authentication when components mounts\r\n    this.authenticateUser();\r\n  };\r\n  render() {\r\n    const {\r\n      LOBBY_PATH,\r\n      LOGIN_PATH,\r\n      REGISTER_PATH,\r\n      VIDEO_ROOM_PATH,\r\n    } = AVAILABLE_PATHS;\r\n    const {\r\n      userData,\r\n      isRoomFormOpen,\r\n      roomListData,\r\n      loadingRooms,\r\n      search,\r\n      severity,\r\n      feedbackMsg,\r\n      isFeedbackOpen,\r\n    } = this.state;\r\n\r\n    const authenticationProps = {\r\n      isUserLoggedIn: userData.isUserLoggedIn,\r\n      printFeedback: this.printFeedback,\r\n      authenticateUser: this.authenticateUser,\r\n    };\r\n    const lobbyProps = {\r\n      userData: userData,\r\n      loadingRooms: loadingRooms,\r\n      roomListData: roomListData,\r\n      loadRooms: this.loadRooms,\r\n      printFeedback: this.printFeedback,\r\n      closeRoomForm: this.closeRoomForm,\r\n      isRoomFormOpen: isRoomFormOpen,\r\n    };\r\n    const navProps = {\r\n      search: search,\r\n      handleSearchChanges: this.handleSearchChanges,\r\n      authenticateUser: this.authenticateUser,\r\n      openRoomForm: this.openRoomForm,\r\n      printFeedback: this.printFeedback,\r\n    };\r\n\r\n    return userData.isDataArrived ? (\r\n      <UserInfoProvider userData={userData}>\r\n        <Router basename=\"/app\">\r\n          {/* Nav */}\r\n          <NavigationBar {...navProps} />\r\n          <Feedback\r\n            closeFeedback={this.closeFeedback}\r\n            isFeedbackOpen={isFeedbackOpen}\r\n            severity={severity}\r\n            feedbackMsg={feedbackMsg}\r\n          />\r\n          <Switch>\r\n            {/* Lobby */}\r\n            <LobbyRoute exact path={LOBBY_PATH} lobbyProps={lobbyProps} />\r\n\r\n            {/* Login */}\r\n            <AuthenticationRoute\r\n              exact\r\n              path={LOGIN_PATH}\r\n              component={Login}\r\n              authenticationProps={authenticationProps}\r\n            />\r\n            {/* Register */}\r\n            <AuthenticationRoute\r\n              exact\r\n              path={REGISTER_PATH}\r\n              component={Register}\r\n              authenticationProps={authenticationProps}\r\n            />\r\n\r\n            {/* Video Room */}\r\n            <VideoRoomRoute\r\n              exact\r\n              path={VIDEO_ROOM_PATH}\r\n              userData={userData}\r\n              printFeedback={this.printFeedback}\r\n            />\r\n          </Switch>\r\n        </Router>\r\n      </UserInfoProvider>\r\n    ) : (\r\n      <Loading />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n"]},"metadata":{},"sourceType":"module"}