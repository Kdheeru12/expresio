{"ast":null,"code":"var _jsxFileName = \"D:\\\\expresio\\\\frontend\\\\src\\\\components\\\\lobby\\\\RoomList.jsx\";\nimport React, { Component } from \"react\"; // Material UI components\n\nimport Modal from \"@material-ui/core/Modal\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Typography from \"@material-ui/core/Typography\"; // Components\n\nimport Room from \"./Room\";\nimport CreateRoomForm from \"./RoomForm/CreateRoomForm\"; // Utility components, functions, constants, objects...\n\nimport { axiosInstance, Loading, refreshingAccessToken, UserInfoContext, RouterUILink } from \"../utilities/\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass RoomList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onRoomFormSubmit = async (data, _ref) => {\n      let {\n        resetForm\n      } = _ref;\n      const roomData = {\n        user: data.user,\n        title: data.title,\n        description: data.description,\n        typeOf: data.typeOf\n      };\n      const {\n        printFeedback,\n        closeRoomForm\n      } = this.props; // First refreshes JWT access token stored in local storage if access token is invalid\n\n      await refreshingAccessToken(); // Then posts the data to backend with the valid access token in the header\n\n      await axiosInstance.post(\"rooms/\", roomData).then(() => {\n        // After successfully posting form these tasks are performed in order\n        resetForm();\n        closeRoomForm();\n        printFeedback({\n          type: \"success\",\n          feedbackMsg: \"Room created\"\n        });\n        this.props.loadRooms();\n      }).catch(error => {\n        if (error.response) {\n          const {\n            status\n          } = error.response; // Error is feedback is printed to user if user is not logged in\n\n          if (status === 401 || status === 400) {\n            closeRoomForm();\n            printFeedback({\n              type: \"error\",\n              feedbackMsg: \"You are not logged in.\"\n            });\n          }\n        }\n\n        console.log(error.message);\n      });\n    };\n\n    this.deleteRoom = roomId => {\n      const {\n        printFeedback\n      } = this.props;\n      axiosInstance.delete(\"rooms/\" + roomId).then(res => {\n        // After successfully deleting these tasks are performed in order\n        this.props.loadRooms();\n        printFeedback({\n          type: \"success\",\n          feedbackMsg: \"Room deleted\"\n        });\n      }).catch(error => console.log(error.message));\n    };\n\n    this.enterRoom = roomId => {\n      const {\n        history\n      } = this.props;\n      history.push(`/video/${roomId}`);\n    };\n\n    this.render = () => {\n      const {\n        closeRoomForm,\n        isRoomFormOpen,\n        roomListData,\n        loadingRooms,\n        printFeedback\n      } = this.props;\n      const {\n        isUserLoggedIn,\n        isDataArrived\n      } = this.context;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Modal, {\n          disableAutoFocus: true,\n          open: isRoomFormOpen,\n          onClose: closeRoomForm,\n          children: /*#__PURE__*/_jsxDEV(CreateRoomForm, {\n            onRoomFormSubmit: this.onRoomFormSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }, this), !isUserLoggedIn && isDataArrived ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\",\n            margin: \"1rem 0\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\" Please \", /*#__PURE__*/_jsxDEV(RouterUILink, {\n              linkTo: \"/login\",\n              innerText: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }, this), \" Or \", /*#__PURE__*/_jsxDEV(RouterUILink, {\n              linkTo: \"/register\",\n              innerText: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 87\n            }, this), \" to create or enter room\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: \"1rem\"\n          },\n          children: loadingRooms ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this) : roomListData.length > 0 ? roomListData.map(data => {\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Room, {\n                deleteRoom: this.deleteRoom,\n                enterRoom: this.enterRoom,\n                apiData: data,\n                printFeedback: printFeedback\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 19\n              }, this)\n            }, data.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"info\",\n            children: \"No Rooms Yet!!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n    };\n\n    this.deleteRoom = this.deleteRoom.bind(this);\n    this.enterRoom = this.enterRoom.bind(this);\n    this.onRoomFormSubmit = this.onRoomFormSubmit.bind(this);\n  } // User information\n\n\n  componentDidMount() {\n    this.props.loadRooms();\n  }\n\n}\n\nRoomList.contextType = UserInfoContext;\nexport default RoomList;","map":{"version":3,"sources":["D:/expresio/frontend/src/components/lobby/RoomList.jsx"],"names":["React","Component","Modal","Alert","Typography","Room","CreateRoomForm","axiosInstance","Loading","refreshingAccessToken","UserInfoContext","RouterUILink","RoomList","constructor","props","onRoomFormSubmit","data","resetForm","roomData","user","title","description","typeOf","printFeedback","closeRoomForm","post","then","type","feedbackMsg","loadRooms","catch","error","response","status","console","log","message","deleteRoom","roomId","delete","res","enterRoom","history","push","render","isRoomFormOpen","roomListData","loadingRooms","isUserLoggedIn","isDataArrived","context","textAlign","margin","marginTop","length","map","id","bind","componentDidMount","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n// Material UI components\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n// Components\r\nimport Room from \"./Room\";\r\nimport CreateRoomForm from \"./RoomForm/CreateRoomForm\";\r\n\r\n// Utility components, functions, constants, objects...\r\nimport {\r\n  axiosInstance,\r\n  Loading,\r\n  refreshingAccessToken,\r\n  UserInfoContext, RouterUILink\r\n} from \"../utilities/\";\r\n\r\nclass RoomList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.deleteRoom = this.deleteRoom.bind(this);\r\n    this.enterRoom = this.enterRoom.bind(this);\r\n    this.onRoomFormSubmit = this.onRoomFormSubmit.bind(this);\r\n  }\r\n  // User information\r\n  static contextType = UserInfoContext;\r\n\r\n  // Creating Room form\r\n  onRoomFormSubmit = async (data, { resetForm }) => {\r\n    const roomData = {\r\n      user: data.user,\r\n      title: data.title,\r\n      description: data.description,\r\n      typeOf: data.typeOf,\r\n    };\r\n    const { printFeedback, closeRoomForm } = this.props;\r\n\r\n    // First refreshes JWT access token stored in local storage if access token is invalid\r\n    await refreshingAccessToken();\r\n\r\n    // Then posts the data to backend with the valid access token in the header\r\n    await axiosInstance\r\n      .post(\"rooms/\", roomData)\r\n      .then(() => {\r\n        // After successfully posting form these tasks are performed in order\r\n        resetForm();\r\n        closeRoomForm();\r\n        printFeedback({ type: \"success\", feedbackMsg: \"Room created\" });\r\n        this.props.loadRooms();\r\n      })\r\n      .catch((error) => {\r\n        if (error.response) {\r\n          const { status } = error.response;\r\n          // Error is feedback is printed to user if user is not logged in\r\n          if (status === 401 || status === 400) {\r\n            closeRoomForm();\r\n            printFeedback({\r\n              type: \"error\",\r\n              feedbackMsg: \"You are not logged in.\",\r\n            });\r\n          }\r\n        }\r\n        console.log(error.message);\r\n      });\r\n  };\r\n\r\n  // Delete Room\r\n  deleteRoom = (roomId) => {\r\n    const { printFeedback } = this.props;\r\n    axiosInstance\r\n      .delete(\"rooms/\" + roomId)\r\n      .then((res) => {\r\n        // After successfully deleting these tasks are performed in order\r\n        this.props.loadRooms();\r\n        printFeedback({ type: \"success\", feedbackMsg: \"Room deleted\" });\r\n      })\r\n      .catch((error) => console.log(error.message));\r\n  };\r\n\r\n  // Directs to the video room\r\n  enterRoom = (roomId) => {\r\n    const { history } = this.props;\r\n    history.push(`/video/${roomId}`);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.loadRooms();\r\n  }\r\n\r\n  render = () => {\r\n    const {\r\n      closeRoomForm,\r\n      isRoomFormOpen,\r\n      roomListData,\r\n      loadingRooms,\r\n      printFeedback,\r\n    } = this.props;\r\n    const { isUserLoggedIn, isDataArrived } = this.context;\r\n    return (\r\n      <>\r\n      {/* Create Room Form */}\r\n        <Modal disableAutoFocus open={isRoomFormOpen} onClose={closeRoomForm}>\r\n          <CreateRoomForm onRoomFormSubmit={this.onRoomFormSubmit} />\r\n        </Modal>\r\n\r\n        {/* User not authentication alert */}\r\n        {!isUserLoggedIn && isDataArrived ? (\r\n          <div style={{ textAlign: \"center\", margin: \"1rem 0\" }}>\r\n            <Typography> Please <RouterUILink linkTo=\"/login\" innerText=\"Login\" /> Or <RouterUILink linkTo=\"/register\" innerText=\"Register\" /> to create or enter room</Typography>\r\n          </div>\r\n        ) : null}\r\n\r\n\r\n          {/* List of Rooms */}\r\n        <div style={{ marginTop: \"1rem\" }}>\r\n          {loadingRooms ? (\r\n            <Loading />\r\n          ) : roomListData.length > 0 ? (\r\n            roomListData.map((data) => {\r\n              return (\r\n                <React.Fragment key={data.id}>\r\n                  <Room\r\n                    deleteRoom={this.deleteRoom}\r\n                    enterRoom={this.enterRoom}\r\n                    apiData={data}\r\n                    printFeedback={printFeedback}\r\n                  />\r\n                </React.Fragment>\r\n              );\r\n            })\r\n          ) : (\r\n            <Alert severity=\"info\">No Rooms Yet!!</Alert>\r\n          )}\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n}\r\nexport default RoomList;\r\n"]},"metadata":{},"sourceType":"module"}